---
# tasks file for secure_ssh

- name: ensure firewalld is running
  service:
    name: firewalld
    state: started
    enabled: true
  tags:
    - firewall

- name: ensure role dependencies are installed
  package:
    name:
      - authconfig
      - policycoreutils-python
      - unzip
      - xorg-x11-xauth
    state: present
  tags:
    - authconfig

- name: firewalld configuration ssh
  when: secure_ssh_dropzone|bool
  firewalld:
    zone: drop
    service: ssh
    permanent: true
    state: enabled
    immediate: true
  tags:
    - firewall

- name: set default zone to drop
  when: secure_ssh_dropzone|bool
  lineinfile:
    path: /etc/firewalld/firewalld.conf
    regexp: '^DefaultZone'
    line: 'DefaultZone=drop'
    state: present
  notify: restart firewalld
  tags:
    - firewall

- name: firewall the ports
  when: "item is defined and item != 22"
  firewalld:
    port: '{{ item }}/tcp'
    permanent: true
    state: enabled
    immediate: true
  with_items:
    - "{{ secure_ssh_port }}"
    - "{{ secure_high_port }}"

- name: Change the ports in SELinux
  when: "item is defined and item != '22'"
  seport:
    ports: "{{ item }}"
    proto: "tcp"
    setype: "ssh_port_t"
    state: "present"
  with_items:
    - "{{ secure_ssh_port }}"
    - "{{ secure_high_port }}"

- name: remove fail2ban
  when: not secure_ssh_fail2ban|bool
  package:
    name:
      - fail2ban
    state: absent
  tags:
    - fail2ban

- name: install fail2ban
  when: secure_ssh_fail2ban|bool
  package:
    name:
      - fail2ban
    state: present
  tags:
    - fail2ban

- name: configure fail2ban jail
  when: secure_ssh_fail2ban|bool
  copy:
    src: jail.local
    dest: /etc/fail2ban/jail.local
    owner: root
    group: root
    mode: 0644
  notify: restart fail2ban
  tags:
    - fail2ban

- name: configure fail2ban action
  when: secure_ssh_fail2ban|bool
  copy:
    src: richrule-dropzone.conf
    dest: /etc/fail2ban/action.d/richrule-dropzone.conf
    owner: root
    group: root
    mode: 0644
  notify: restart fail2ban
  tags:
    - fail2ban

- name: enable fail2ban
  when: secure_ssh_fail2ban|bool
  systemd:
    name: fail2ban
    enabled: true
  tags:
    - fail2ban

- name: ensure password hashing algorithm is SHA-512
  when: secure_ssh_optional|bool
  command: authconfig --passalgo=sha512 --update
  changed_when: false
  tags:
    - authconfig

- name: create sudoers.d file
  copy:
    src: 'sudoers/sudo_wheel'
    dest: /etc/sudoers.d/sudo_wheel
    owner: root
    group: root
    mode: "0440"
  tags:
    - sudoers

- name: disable requiretty in sudoers file
  lineinfile:
    path: /etc/sudoers
    regexp: '^Defaults.*requiretty'
    line: Defaults    !requiretty
    state: present
  tags:
    - sudoers

- name: install trusted-user-ca-keys.pub
  when: signed_ssh_keys is defined and signed_ssh_keys|bool
  copy:
    src: "ssh/{{ TrustedUserCAKeys|default('trusted-user-ca-keys.pub') }}"
    dest: "/etc/ssh/{{ TrustedUserCAKeys }}"
    owner: root
    group: root
    mode: 0644
  notify: restart sshd
  tags:
    - signed_ssh_keys

- name: manage revoked_keys
  when: signed_ssh_keys is defined and signed_ssh_keys|bool
  copy:
    src: ssh/revoked_keys
    dest: /etc/ssh/revoked_keys
    owner: root
    group: root
    mode: 0644
  notify: restart sshd
  tags:
    - config
    - revoked_keys
    - signed_ssh_keys

- name: TrustedUserCAKeys configuration
  when: signed_ssh_keys is defined and signed_ssh_keys|bool
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: '^(#)?TrustedUserCAKeys'
      line: "TrustedUserCAKeys /etc/ssh/{{ TrustedUserCAKeys }}"
    - regexp: '^(#)?RevokedKeys'
      line: "RevokedKeys /etc/ssh/revoked_keys"

- name: display the legal banner before user logs in.
  copy:
    src: issue.net
    dest: /etc/issue.net
    owner: root
    group: root
    mode: 0644
  notify: restart sshd
  tags:
    - banner

- name: create the legal banner when users log in on console.
  copy:
    src: issue
    dest: /etc/issue
    owner: root
    group: root
    mode: 0644
  tags:
    - banner

- name: create the legal banner when users logged in.
  copy:
    src: motd
    dest: /etc/motd
    owner: root
    group: root
    mode: 0644
  tags:
    - banner

- name: Harden SSH configuration
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: '^(#)?LogLevel'
      line: "LogLevel {{ LogLevel }}"
    - regexp: '^(#)?PubkeyAuthentication'
      line: "PubkeyAuthentication {{ PubkeyAuthentication }}"
    - regexp: '^(#)?GSSAPIAuthentication'
      line: "GSSAPIAuthentication {{ GSSAPIAuthentication }}"
    - regexp: '^(#)?KerberosAuthentication'
      line: "KerberosAuthentication {{ KerberosAuthentication }}"
    - regexp: '^(#)?RhostsRSAAuthentication'
      line: "#RhostsRSAAuthentication no"
    - regexp: '^(#)?ChallengeResponseAuthentication'
      line: |
        ChallengeResponseAuthentication {{ ChallengeResponseAuthentication }}
    - regexp: '^UsePAM'
      line: 'UsePAM yes'
    - regexp: '^(#)?X11Forwarding'
      line: "X11Forwarding yes"
    - regexp: '^(#)?X11UseLocalhost'
      line: "X11UseLocalhost no"
    - regexp: '^(#)?AddressFamily'
      line: "AddressFamily {{ AddressFamily }}"
    - regexp: "^(#)?Protocol"
      line: "Protocol 2"
    - regexp: '^(#)?AllowAgentForwarding'
      line: "AllowAgentForwarding {{ AllowAgentForwarding }}"
    - regexp: '^(#)?AllowTcpForwarding'
      line: "AllowTcpForwarding {{ AllowTcpForwarding }}"
    - regexp: '^(#)?PrintLastLog'
      line: "PrintLastLog yes"
    - regexp: '^(#)?AuthorizedKeysFile'
      line: "AuthorizedKeysFile {{ AuthorizedKeysFile }}"
    - regexp: '^(#)?PasswordAuthentication'
      line: "PasswordAuthentication {{ PasswordAuthentication }}"
    - regexp: '^(#)?PermitEmptyPasswords'
      line: "PermitEmptyPasswords no"
    - regexp: '^(#)?PermitRootLogin'
      line: "PermitRootLogin {{ PermitRootLogin }}"
    - regexp: '^(#)?IgnoreRhosts'
      line: 'IgnoreRhosts yes'
    - regexp: '^(#)?Banner'
      line: 'Banner /etc/issue.net'
    - regexp: '^(#)?HostbasedAuthentication'
      line: "HostbasedAuthentication no"
    - regexp: '^(#)?IgnoreUserKnownHosts'
      line: 'IgnoreUserKnownHosts {{ IgnoreUserKnownHosts }}'
    - regexp: '^(#)?TCPKeepAlive'
      line: "TCPKeepAlive {{ TCPKeepAlive }}"
    - regexp: '^(#)?ClientAliveInterval'
      line: "ClientAliveInterval {{ ClientAliveInterval }}"
    - regexp: '^(#)?ClientAliveCountMax'
      line: "ClientAliveCountMax {{ ClientAliveCountMax }}"
    - regexp: '^(#)?LoginGraceTime'
      line: "LoginGraceTime {{ LoginGraceTime }}"
    - regexp: '^(#)?Ciphers'
      line: "Ciphers {{ Ciphers }}"
    - regexp: '^(#)?KexAlgorithms'
      line: "KexAlgorithms {{ KexAlgorithms }}"
    - regexp: '^(#)?MACs'
      line: "MACs {{ MACs }}"
  notify: restart sshd
  tags:
    - config
    - banner

- name: SSH extra port configuration(s)
  when:
    - secure_ssh_port is defined and secure_ssh_port != 22
    - secure_high_port is defined and secure_high_port != 22
  blockinfile:
    dest: /etc/ssh/sshd_config
    regexp: '^(#)?Port'
    block: >
      Port {{ secure_ssh_port }}
      Port {{ secure_high_port }}

- name: Optional SSH configuration
  when: secure_ssh_optional|bool
  lineinfile:
    dest: /etc/ssh/sshd_config
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - regexp: '^(#)?MaxAuthTries \d'
      line: "MaxAuthTries {{ MaxAuthTries | default('10') }}"
    - regexp: '^(#)?MaxSessions'
      line: "MaxSessions {{ MaxSessions }}"
    - regexp: '^(#)?StrictModes'
      line: 'StrictModes yes'
    - regexp: '^(#)?Compression'
      line: 'Compression {{ Compression }}'
    - regexp: '^(#)?PermitUserEnvironment'
      line: "PermitUserEnvironment {{ PermitUserEnvironment }}"
    - regexp: '^(#)?HostKeyAlgorithms'
      line: "HostKeyAlgorithms {{ HostKeyAlgorithms }}"
  notify: restart sshd
  tags:
    - config

- name: Replace SFTP server subsystem
  when: chroot_sftp_server|bool
  replace:
    dest: /etc/ssh/sshd_config
    regexp: '.*Subsystem.*sftp.*/usr/libexec/openssh/sftp-server$'
    replace: 'Subsystem       sftp    internal-sftp'
  notify: restart sshd

- name: Configure chroot group
  when: chroot_sftp_server|bool
  blockinfile:
    path: /etc/ssh/sshd_config
    insertafter: EOF
    block: |
      Match group chroot
        ChrootDirectory /home/
        X11Forwarding no
        AllowTcpForwarding no
        ForceCommand internal-sftp
  notify: restart sshd

- name: ensure permissions on /etc/ssh/sshd_config are restricted
  file:
    dest: /etc/ssh/sshd_config
    state: file
    owner: root
    group: root
    mode: 0600
  notify: restart sshd
  tags:
    - config

- name: check if /etc/ssh/moduli contains weak Diffie-Hellman parameters
  shell: awk '$5 < 2048' /etc/ssh/moduli
  register: sshd_register_moduli
  changed_when: false
  check_mode: false

- name: deactivate short Diffie-Hellman moduli
  when: sshd_register_moduli.stdout
  shell: "awk '$5 >= 2048' /etc/ssh/moduli > /etc/ssh/moduli.tmp && mv -f /etc/ssh/moduli.tmp /etc/ssh/moduli"
  tags:
    - skip_ansible_lint

- name: create .ssh in user skeleton
  file:
    path: /etc/skel/.ssh
    mode: 0700
    state: directory
  tags:
    - config
    - ssh_users

- name: verify if ssh config exists in user skeleton
  stat:
    path: "/etc/skel/.ssh/config"
  register: user_config
  tags:
    - config
    - ssh_users

- name: create ssh config in user skeleton
  file:
    path: /etc/skel/.ssh/config
    owner: root
    group: root
    mode: 0600
    state: "{{ 'file' if  user_config.stat.exists else 'touch'}}"
  tags:
    - config
    - ssh_users

- name: enable ForwardAgent in /etc/skel/.ssh/config file
  lineinfile:
    dest: /etc/skel/.ssh/config
    regexp: '^ForwardAgent'
    line: 'ForwardAgent yes'
    state: present
  tags:
    - config
    - ssh_users

- name: enable HashKnownHosts in /etc/ssh/ssh_config file
  lineinfile:
    dest: /etc/ssh/ssh_config
    regexp: '^HashKnownHosts'
    line: 'HashKnownHosts yes'
    state: present
  tags:
    - config
    - ssh_users

- name: create central directory for authorized_keys
  when: distribute_ssh_keys is defined and distribute_ssh_keys|bool
  file:
    dest: /etc/ssh/authorized_keys
    state: directory
    owner: root
    group: root
    mode: 0711
  tags:
    - ssh_users
    - non_users

- name: unlock central authorized_keys files for writing
  when: distribute_ssh_keys is defined and distribute_ssh_keys|bool
  shell: chattr -i /etc/ssh/authorized_keys/*
  changed_when: false  # it is a toggle
  register: keys_dir
  failed_when: "keys_dir.rc != 0 and ('chattr: No such file or directory while trying to stat /etc/ssh/authorized_keys/*' not in keys_dir.stderr_lines)"
  ignore_errors: true
  tags:
    - ssh_users
    - non_users

- name: create ssh_groups like chroot, staff and users
  when: manage_ssh_groups is defined and manage_ssh_groups|bool
  group:
    system: true
    name: "{{ item }}"
    state: present
  with_items: "{{ ssh_groups }}"
  tags:
    - ssh_groups

- name: ensure the people in ssh_users have a user created with options
  when:
    - manage_ssh_users is defined and manage_ssh_users|bool
  user:
    name: "{{ item.username }}"
    uid: "{{ item.uid | default(omit) }}"
    group: "{{ item.group | default('users') }}"
    seuser: "{{ item.seuser | default('user_u') }}"
    comment: "{{ item.comment | default(omit) }}"
    create_home: "{{ item.create_home | default('true') }}"
    move_home: "{{ item.move_home | default(omit) }}"
    password_lock: "{{ item.password_lock | default(omit) }}"
    home: "{{ item.home | default(omit) }}"
    expires: "{{ item.expires | default(omit) }}"
    generate_ssh_key: "{{ item.generate_ssh_key | default('false') }}"
    non_unique: true  # for cleaning up inconsistent uids
    shell: "{{ item.shell }}"
    state: present
    system: "{{ item.system | default(omit) }}"
  with_items:
    - "{{ ssh_users }}"
  tags:
    - ssh_users

- name: ensure the people in ssh_users have a seuser type
  when:
    - semanage_ssh_users is defined and semanage_ssh_users|bool
    - ssh_users is defined
  command: "semanage login -a -s {{ item.seuser | default('xguest_u') }} {{ item.username }}"
  with_items: "{{ ssh_users }}"
  register: seuser
  failed_when: seuser.rc|int > 1
  tags:
    - ssh_users

- name: set the primary group for users
  when:
    - manage_ssh_groups is defined and manage_ssh_groups|bool
    - ssh_users is defined
  user:
    name: "{{ item.username }}"
    group: "{{ item.group | default('users') }}"
  with_items:
    - "{{ ssh_users }}"
  tags:
    - ssh_groups
    - ssh_users

- name: remove users from all groups except their primary group
  when:
    - manage_ssh_groups is defined and manage_ssh_groups|bool
    - ssh_users is defined
  user:
    name: "{{ item.username }}"
    group: "{{ item.group | default('users') }}"
  with_items: "{{ ssh_users }}"
  tags:
    - ssh_groups
    - ssh_users

- name: remove user private groups
  when:
    - manage_ssh_groups is defined and manage_ssh_groups|bool
    - ssh_users is defined
  group:
    name: "{{ item.username }}"
    state: absent
  with_items: "{{ ssh_users }}"
  tags:
    - non_users
    - ssh_groups
    - ssh_users

- name: root manages authorized keys for ssh_users
  when:
    - distribute_ssh_keys is defined and distribute_ssh_keys|bool
    - item.group == 'wheel' or item.group == 'staff' or item.group == 'users'
    - ssh_users is defined
  copy:
    dest: /etc/ssh/authorized_keys/{{ item.username }}
    src: "pubkeys/{{ item.username }}"
    owner: "{{ item.username }}"
    mode: 0640
  ignore_errors: true
  no_log: true
  with_items:
    - "{{ ssh_users }}"
  tags:
    - ssh_users

- name: ensure all keys of non_users are removed
  when:
    - distribute_ssh_keys is defined and distribute_ssh_keys|bool
    - non_users is defined
  file:
    dest: "/etc/ssh/authorized_keys/{{ item }}"
    state: absent
  with_items:
    - "{{ non_users }}"
  tags:
    - non_users

- name: ensure all non_users are removed
  when:
    - manage_ssh_users is defined and manage_ssh_users|bool
    - non_users is defined
  user:
    name: "{{ item }}"
    state: absent
    remove: true
    force: true
  with_items:
    - "{{ non_users }}"
  tags:
    - non_users

- name: lock central authorized_keys files for writing
  when:
    - distribute_ssh_keys is defined and distribute_ssh_keys|bool
    - ssh_users is defined
  shell: chattr +i /etc/ssh/authorized_keys/*
  changed_when: false  # it is a toggle
  ignore_errors: true
  tags:
    - ssh_users
    - non_users

- name: ensure ssh_users have no authorized_keys in their homedir
  when:
    - distribute_ssh_keys is defined and distribute_ssh_keys|bool
    - ssh_users is defined
  file:
    state: absent
    path: "/home/{{ item.username }}/.ssh/authorized_keys"
  with_items:
    - "{{ ssh_users }}"
  tags:
    - ssh_users

## TODO Hashicorp Vault
- name: download vault-ssh-helper from the internet
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  delegate_to: localhost
  become: false
  get_url:
    url: "{{ vault_helper_url }}"
    sha256sum: "{{ vault_helper_sha256sum }}"
    dest: "/tmp/{{ vault_helper_zip }}"
    timeout: 30
  register: task_result
  until: task_result is success
  retries: 3
  delay: 10

- name: unpack vault-ssh-helper
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  unarchive:
    src: "/tmp/{{ vault_helper_zip }}"
    dest: "/usr/bin"
    creates: "/usr/bin/vault-ssh-helper"

- name: create directory for vault-ssh-helper
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  file:
    path: "/etc/vault-ssh-helper.d"
    state: directory

- name: copy vault-ssh-helper configuration file
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  template:
    src: config.hcl
    dest: /etc/vault-ssh-helper.d/config.hcl

- name: Comment common-auth mechanism
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  lineinfile:
    firstmatch: true
    path: "/etc/pam.d/sshd"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: present
  with_items:
    - {regexp: '^(#)?auth       substack     password-auth', line: '#auth       substack     password-auth'}
    - {regexp: '^(#)?password   include      password-auth', line: '#password   include      password-auth'}

- name: Insert the vault-ssh-helper configuration for ssh auth
  when: hashicorp_vault_ssh is defined and hashicorp_vault_ssh|bool
  blockinfile:
    path: "/etc/pam.d/sshd"
    block: |
      auth requisite pam_exec.so quiet expose_authtok log=/tmp/vaultssh.log /usr/bin/vault-ssh-helper -config=/etc/vault-ssh-helper.d/config.hcl
      auth optional pam_unix.so not_set_pass use_first_pass nodelay
    insertbefore: "auth       include      postlogin"
    state: present
